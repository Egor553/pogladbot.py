import asyncio
import platform
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime, timedelta
import logging
from zoneinfo import ZoneInfo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
if platform.system() == "Windows":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '8431173012:AAGLU7aN9DlIfIHt7E7ZAgjMg7ZUDp6rY0c'

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class OrderStates(StatesGroup):
    selecting_tariff_type = State()
    selecting_tariff = State()
    entering_address = State()
    entering_time = State()
    entering_phone = State()
    confirming_order = State()
    selecting_payment_method = State()
    leaving_review = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    bot = Bot(token=TOKEN)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise SystemExit("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
orders = {}
reviews = []
users = {}

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
def get_start_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")],
        [InlineKeyboardButton(text="–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã", callback_data="work_stages")],
        [InlineKeyboardButton(text="–£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –æ—Ç–∑—ã–≤—ã", callback_data="examples_reviews")],
        [InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about_us")],
        [InlineKeyboardButton(text="–í–æ–ø—Ä–æ—Å—ã –∫ –Ω–∞–º (—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞)", callback_data="support")],
    ])
    return keyboard

# /start
@dp.message(Command('start', '–°—Ç–∞—Ä—Ç', 'start'))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    users[user_id] = {'last_activity': datetime.now(), 'promo': None, 'first_order': True}
    
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ü–æ–≥–ª–∞–¥—å–ë–æ—Ç ‚Äî —ç–∫–æ–Ω–æ–º–ª—é –≤–∞—à–µ –≤—Ä–µ–º—è –∏ —Å–∏–ª—ã –Ω–∞ –≥–ª–∞–∂–∫–µ –æ–¥–µ–∂–¥—ã. –ó–∞–∫–∞–∑–∞—Ç—å –º–æ–∂–Ω–æ —Å–Ω–∏–∑—É üëá"
    await message.answer_photo(photo='AgACAgIAAxkBAAIEA2jdZwx79gl9ltjC8vkuJ73wyYCtAALc_jEbkOvpSkLFxuDzEW-uAQADAgADeQADNgQ', caption=welcome_text)
    value_text = "–° –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –≤—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ –¥–æ 5 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –∏ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å–∞–º—ã–º –≤–∞–∂–Ω—ã–º üíò. –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –µ—Ö–∞—Ç—å –≤ –ø—Ä–∞—á–µ—á–Ω—É—é, –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞—Ç—å –∏–ª–∏ –≥–ª–∞–¥–∏—Ç—å —Å–∞–º–∏–º ‚Äî –≤—Å—ë —Å–¥–µ–ª–∞–µ–º –º—ã.\n–ù–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –µ—Å—Ç—å —Å—é—Ä–ø—Ä–∏–∑ ü§´üéÅ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ –º—ã —Ç–µ–±–µ –ø–æ–¥–∞—Ä–∏–ª–∏, –∂–º–∏ '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'"
    await message.answer(value_text, reply_markup=get_start_menu())

# Callback handler
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    try:
        if data == "make_order":
            await handle_make_order(callback.message, state)
        elif data == "work_stages":
            await handle_work_stages(callback.message)
        elif data == "examples_reviews":
            await handle_examples_reviews(callback.message)
        elif data == "about_us":
            await handle_about_us(callback.message)
        elif data == "support":
            await handle_support(callback.message)
        elif data.startswith("tariff_type_"):
            await handle_tariff_type(callback, state)
        elif data.startswith("tariff_"):
            await handle_select_tariff(callback, state)
        elif data == "change_address":
            await state.set_state(OrderStates.entering_address)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
        elif data == "change_time":
            await state.set_state(OrderStates.entering_time)
            await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: –ù–∞–ø—Ä–∏–º–µ—Ä: 02.10.25 18:00")
        elif data == "change_phone":
            await state.set_state(OrderStates.entering_phone)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        elif data == "back_to_tariffs":
            await handle_make_order(callback.message, state)
        elif data == "confirm_order":
            await show_payment_methods(callback.message, state)
        elif data.startswith("payment_"):
            await handle_payment_method(callback, state)
        elif data == "leave_review":
            await state.set_state(OrderStates.leaving_review)
            await callback.message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤: —É–∫–∞–∂–∏—Ç–µ –∑–≤–µ–∑–¥—ã (1-5), –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é (–¥–∞/–Ω–µ—Ç). –§–æ—Ä–º–∞—Ç: 5\n–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å!\n–¥–∞")
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

# –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑
async def handle_make_order(message: types.Message, state: FSMContext):
    text = "–£ –Ω–∞—Å –µ—Å—Ç—å —Å—é—Ä–ø—Ä–∏–∑ –¥–ª—è –≤–∞—Å üéÅ\n–ù–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è ‚Äî –∫–∞–∂–¥–∞—è —Ç—Ä–µ—Ç—å—è –≤–µ—â—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ:\n–ü–ª–∞—Ç–∏—Ç–µ –∑–∞ 2, –≥–ª–∞–¥–∏–º 3\n–ü–ª–∞—Ç–∏—Ç–µ –∑–∞ 4, –≥–ª–∞–¥–∏–º 6\n–ü–ª–∞—Ç–∏—Ç–µ –∑–∞ 10, –≥–ª–∞–¥–∏–º 15"
    await message.answer(text)
    
    text_tariffs = """–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:
* –õ—é–±–∞—è –æ–¥–µ–∂–¥–∞ - 250 —Ä—É–±–ª–µ–π
* 10 –ª—é–±—ã—Ö –≤–µ—â–µ–π - 2000 —Ä—É–±–ª–µ–π
* 10 –ª—é–±—ã—Ö –≤–µ—â–µ–π —Å–æ —Å—Ç–∏—Ä–∫–æ–π - 3000 —Ä—É–±–ª–µ–π
–ö—É—Ä—å–µ—Ä ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –°—Ä–æ–∫: –ø—Ä–∏–≤–æ–∑–∏–º –≤–µ—â–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å."""
    await message.answer(text_tariffs)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π:")
    await state.set_state(OrderStates.selecting_tariff)

# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–µ—â–µ–π
@dp.message(OrderStates.selecting_tariff)
async def handle_select_items(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        await state.update_data(quantity=quantity)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ: –ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ–Ω–∏–Ω–∞, 76")
        await state.set_state(OrderStates.entering_address)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤–µ—â–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5")

# –ê–¥—Ä–µ—Å
@dp.message(OrderStates.entering_address)
async def handle_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: –ù–∞–ø—Ä–∏–º–µ—Ä: 02.10.25 18:00")
    await state.set_state(OrderStates.entering_time)

# –í—Ä–µ–º—è
@dp.message(OrderStates.entering_time)
async def handle_time(message: types.Message, state: FSMContext):
    chlyabinsk_tz = ZoneInfo("Asia/Yekaterinburg")  # –ß–µ–ª—è–±–∏–Ω—Å–∫, UTC+5
    now_local = datetime.now(chlyabinsk_tz)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ try
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥ —á—á:–º–º"
        time_str = message.text.strip()
        dt = datetime.strptime(time_str, "%d.%m.%y %H:%M")
        dt_local = dt.replace(tzinfo=chlyabinsk_tz)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º
        if dt_local < now_local:
            raise ValueError("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
        
        await state.update_data(time=time_str)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(OrderStates.entering_phone)
    except ValueError as e:
        error_msg = str(e) if str(e) else "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02.10.25 18:00). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–µ–∂–¥—É –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª."
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        quick_times = [
            [KeyboardButton(text=f"{now_local.strftime('%d.%m.%y %H:%M')} (—Å–µ–π—á–∞—Å)")],
            [KeyboardButton(text=f"{(now_local + timedelta(hours=1)).strftime('%d.%m.%y %H:%M')} (+1 —á–∞—Å)")],
            [KeyboardButton(text=f"{(now_local + timedelta(hours=2)).strftime('%d.%m.%y %H:%M')} (+2 —á–∞—Å–∞)")],
            [KeyboardButton(text=f"{(now_local + timedelta(hours=3)).strftime('%d.%m.%y %H:%M')} (+3 —á–∞—Å–∞)")],
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=quick_times, resize_keyboard=True, one_time_keyboard=True)
        await message.answer(error_msg + " –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∏–∂–µ:", reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02.10.25 18:00).")

# –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(OrderStates.entering_phone)
async def handle_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await show_confirmation(message, state)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def show_confirmation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tariff = f"{data.get('quantity', 0)} –≤–µ—â–µ–π –ø–æ —Ç–∞—Ä–∏—Ñ—É (—Å–º. –≤—ã—à–µ)"
    address = data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')
    time = data.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    phone = data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
    quantity = data.get('quantity', 0)
    first_order = users.get(message.from_user.id, {}).get('first_order', True)
    
    base_price = 250 * quantity if quantity <= 10 else (2000 if quantity == 10 else 3000)
    if first_order:
        price = base_price * 2 / 3  # 2/3 –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    else:
        price = base_price  # –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    
    text = f"""–ò—Ç–æ–≥:
* –¢–∞—Ä–∏—Ñ: {tariff}
* –ê–¥—Ä–µ—Å: {address}
* –í—Ä–µ–º—è: {time}
* –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {int(price)} ‚ÇΩ"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="change_address")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="change_phone")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="back_to_tariffs")],
    ])
    
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(OrderStates.confirming_order)

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
async def show_payment_methods(message: types.Message, state: FSMContext):
    text = "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç ‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∫—É—Ä—å–µ—Ä—É –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É", callback_data="payment_card")],
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É", callback_data="payment_cash")],
    ])
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(OrderStates.selecting_payment_method)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
async def handle_payment_method(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    payment = callback.data.split("_")[1]
    orders[user_id] = data.copy()
    orders[user_id]['status'] = '–ü—Ä–∏–Ω—è—Ç'
    orders[user_id]['payment'] = payment
    
    if payment == "card":
        await callback.message.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: 12345. –û–ø–ª–∞—Ç–∏—Ç–µ –∫–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ.")
    elif payment == "cash":
        await callback.message.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: 12345. –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ.")
    
    users[user_id]['first_order'] = False  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
    await state.clear()

# –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã
async def handle_work_stages(message: types.Message):
    text = """–ü—Ä–æ—Ü–µ—Å—Å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ ü§ù
* –í—ã –¥–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑ ‚Äî –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.
* –ö—É—Ä—å–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏–µ–∑–∂–∞–µ—Ç ‚Äî –∑–∞–±–∏—Ä–∞–µ—Ç –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞—Ä–∞–Ω–µ–µ —Å–æ–±—Ä–∞–ª–∏ –≤ –ø–∞–∫–µ—Ç –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.
* –ú—ã –≥–ª–∞–¥–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –±–µ—Ä–µ–∂–Ω–æ, –±—ã—Å—Ç—Ä–æ.
* –ö—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ ‚Äî —á–∏—Å—Ç—ã–µ –∏ –≤—ã–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –≤–µ—â–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫ –≤–∞–º. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –±–æ—Ç–µ –∏ —Å–æ–±—Ä–∞—Ç—å –≤–µ—â–∏ –≤ –ø–∞–∫–µ—Ç üòä"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")],
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")],
    ])
    
    await message.answer(text, reply_markup=keyboard)

# –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –æ—Ç–∑—ã–≤—ã
async def handle_examples_reviews(message: types.Message):
    # –°–∞–º—ã–π –∫–æ–∑—ã—Ä–Ω—ã–π –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    top_review = "–ê–Ω–∞—Å—Ç–∞—Å–∏—è, –º–∞–º–∞ –¥–≤–æ–∏—Ö ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –° –¥–≤—É–º—è –¥–µ—Ç—å–º–∏ –∏ —Ä–∞–±–æ—Ç–æ–π –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≥–ª–∞–∂–∫—É –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º. –û–¥–µ–∂–¥–∞ –∫–æ–ø–∏–ª–∞—Å—å –Ω–µ–¥–µ–ª—è–º–∏, —è —É–∂–µ —Å–º–∏—Ä–∏–ª–∞—Å—å, —á—Ç–æ –±—É–¥–µ–º —Ö–æ–¥–∏—Ç—å –ø–æ–º—è—Ç—ã–º–∏. –ó–∞–∫–∞–∑–∞–ª–∞ –ü–æ–≥–ª–∞–¥—å–ë–æ—Ç ‚Äî –∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –≤—Å—ë –≤–µ—Ä–Ω—É–ª–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–µ, —Å–ª–æ–∂–µ–Ω–Ω–æ–µ, –±—É–¥—Ç–æ –Ω–æ–≤–æ–µ. –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —á–µ–ª–æ–≤–µ–∫–æ–º, –∞ –Ω–µ –≤–µ—á–Ω–æ–π –ø—Ä–∞—á–∫–æ–π."
    await message.answer_photo(photo='AgACAgIAAxkBAAIEDWjdZ7xFZQfMjyEXmqD2UIKlWzO5AALq_jEbkOvpSqrckIaGN9YvAQADAgADeQADNgQ', caption=top_review)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    reviews_group1 = """–û—Ç–∑—ã–≤—ã 1-5:
1. –ú–∞—Ä–∏–Ω–∞, 34 ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –°–µ—Ä–≤–∏—Å –≤—ã—Ä—É—á–∞–µ—Ç –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é. –í—Å—ë —á—ë—Ç–∫–æ. –ö—Ä–∞–π–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é.
2. –ê–Ω–¥—Ä–µ–π, 29 ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –†—É–±–∞—à–∫–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ, –ø—Ä–∏–µ—Ö–∞–ª–∏. –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.
3. –õ–∏–¥–∏—è, 56 ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –û—á–µ–Ω—å —É–¥–æ–±–Ω–æ –¥–ª—è –º–µ–Ω—è, —Å–ø–∞—Å–∏–±–æ.
4. –û–∫—Å–∞–Ω–∞, 41 ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –ì–ª–∞–∂–∫–∞ ‚Äî –Ω–µ –º–æ–π –∫–æ–Ω—ë–∫, —Ç–µ–ø–µ—Ä—å –≤—Å—ë –∑–∞ –º–µ–Ω—è –¥–µ–ª–∞—é—Ç, —Å–ø–∞—Å–∏–±–æ!!!
5. –ü–∞–≤–µ–ª, 37 ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –ü—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤–ª—ë–Ω –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é."""
    await message.answer_photo(photo='AgACAgIAAxkBAAIEBWjdZ2AFss5xKwQJan-OuPo8cZS0AALd_jEbkOvpSpFD-iw9jQuHAQADAgADeQADNgQ', caption=reviews_group1)
    
    reviews_group2 = """–û—Ç–∑—ã–≤—ã 6-9:
6. ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –ë—ã—Å—Ç—Ä–æ –∏ –∏–¥–µ–∞–ª—å–Ω–æ!
7. ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –õ—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å!
8. ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –í–µ—â–∏ ‚Äî –æ–≥–æ–Ω—å!
9. ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –ò–¥–µ–∞–ª—å–Ω–æ"""
    await message.answer_photo(photo='AgACAgIAAxkBAAIEB2jdZ3cnQwAB1nqVx_3qOiNdK0bGygAC4f4xG5Dr6UogN6n-4DG-ggEAAwIAA3kAAzYE', caption=reviews_group2)
    
    reviews_group3 = """–û—Ç–∑—ã–≤—ã 10-14:
10. –°–≤–µ—Ç–ª–∞–Ω–∞, 67 –ª–µ—Ç ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –ó–¥–æ—Ä–æ–≤—å–µ —É–∂–µ –Ω–µ —Ç–æ, —Ç—è–∂—ë–ª—ã–π —É—Ç—é–≥ –¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–∂–Ω–æ. –ê –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–ø—Ä—è—Ç–Ω–æ —Ö–æ—á–µ—Ç—Å—è. –û—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ —Å–µ—Ä–≤–∏—Å—É - –∫—É—Ä—å–µ—Ä –∑–∞–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—â–∏, –≤—Å—ë –æ—Ç–≥–ª–∞–∂–µ–Ω–æ —Å –¥—É—à–æ–π. –î–ª—è –º–µ–Ω—è —ç—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ —É—Å–ª—É–≥–∞.
11. –ú–∞–∫—Å–∏–º, –æ—Ç–µ—Ü —Å–µ–º–µ–π—Å—Ç–≤–∞ - ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –ú—ã —Å –∂–µ–Ω–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ø–æ—Ä–∏–ª–∏: –∫–æ–º—É –≥–ª–∞–¥–∏—Ç—å –≥–æ—Ä—ã —à–∫–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ –Ω–∞—à–∏ —Ä—É–±–∞—à–∫–∏. –° –ü–æ–≥–ª–∞–¥—å–ë–æ—Ç —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –æ—Ç–ø–∞–ª. –ù–∏–∫–∞–∫–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, –≤–µ—â–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç —á–∏—Å—Ç—ã–µ, —Å–ª–æ–∂–µ–Ω–Ω—ã–µ, –¥–µ—Ç–∏ –¥–æ–≤–æ–ª—å–Ω—ã, –∏ –º—ã —Ç–æ–∂–µ.
12. –ö–∏—Ä–∞, —Å—Ç—É–¥–µ–Ω—Ç–∫–∞ ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –°–µ—Å—Å–∏—è, –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –∏ –≥–æ—Ç–æ–≤–∫–∞ ‚Äî –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≥–ª–∞–∂–∫—É –Ω–µ –±—ã–ª–æ —Å–æ–≤—Å–µ–º. –Ø –ø—Ä–∏–≤—ã–∫–ª–∞ –Ω–æ—Å–∏—Ç—å –º—è—Ç—ã–µ –≤–µ—â–∏, —á–µ—Å—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±–æ–≤–∞–ª–∞ —Å–µ—Ä–≤–∏—Å —Ä–∞–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏ —Ç–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑—ã–≤–∞—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ. –≠—Ç–æ —Ç–∞–∫–æ–π –∫–∞–π—Ñ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–æ—Å–∏—Ç—å –≤—Å—ë —á–∏—Å—Ç–æ–µ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–µ, –∞ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–æ—á—å –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º –Ω–∞ —É—Ç—é–≥.
13. –ò–≥–æ—Ä—å, –∞–π—Ç–∏—à–Ω–∏–∫ ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –†–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞, –Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∞—Å—Ç–≤—É—é –≤ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∞—Ö. –í –º—è—Ç–æ–π —Ñ—É—Ç–±–æ–ª–∫–µ –µ—â—ë —Å–æ–π–¥—ë—Ç, –∞ –≤–æ—Ç —Ä—É–±–∞—à–∫–∏ ‚Äî –ø–æ–∑–æ—Ä. –ñ–µ–Ω–∞ —É—Å—Ç–∞–ª–∞ –º–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, —è —Å–∞–º –≤—Å—ë –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª. –¢–µ–ø–µ—Ä—å —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –æ—Ç–¥–∞—é –≤–µ—â–∏, –∏ –≤–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç. –í—ã–≥–ª—è–∂—É –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —ç—Ç–æ –Ω–µ —Ç—Ä–∞—á—É.
14. –ü–æ–ª–∏–Ω–∞, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ ‚Äî ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –£ –Ω–∞—Å —Å –º—É–∂–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–µ–±—ë–Ω–æ–∫, –∏ —è –¥—É–º–∞–ª–∞, —á—Ç–æ –≥–ª–∞–∂–∫–∞ ‚Äî —ç—Ç–æ –Ω–µ–∏–∑–±–µ–∂–Ω–æ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ. –ù–æ —Å–µ—Ä–≤–∏—Å –ø–æ–∫–∞–∑–∞–ª, —á—Ç–æ –º–æ–∂–Ω–æ –∂–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É. –¢–µ–ø–µ—Ä—å —è –ø—Ä–æ–≤–æ–∂—É –≤–µ—á–µ—Ä —Å —Ä–µ–±—ë–Ω–∫–æ–º, –∞ –Ω–µ —Å –≥–ª–∞–¥–∏–ª—å–Ω–æ–π –¥–æ—Å–∫–æ–π. –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–æ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏."""
    await message.answer_photo(photo='AgACAgIAAxkBAAIECWjdZ4ci5UEa6lInky19EpffuZORAALj_jEbkOvpSilMEP3byErwAQADAgADeQADNgQ', caption=reviews_group3)
    
    reviews_group4 = """–û—Ç–∑—ã–≤—ã 15-18:
15. ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –ù–µ –æ–∂–∏–¥–∞–ª —Ç–∞–∫–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ. –û—á–µ–Ω—å —É–¥–æ–±–Ω–æ!
16. ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –ö—É—Ä—å–µ—Ä –≤—Å–µ–≥–¥–∞ –≤–µ–∂–ª–∏–≤—ã–π, –≤–µ—â–∏ –≤ –ø–∞–∫–µ—Ç–∞—Ö, –≤—Å—ë —á–∏—Å—Ç–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.
17. ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –≠–∫–æ–Ω–æ–º–∏—è –Ω–µ—Ä–≤–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—è—Ç—å –∑–≤—ë–∑–¥!
18. ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ –°–Ω–∞—á–∞–ª–∞ —Å–æ–º–Ω–µ–≤–∞–ª–∞—Å—å, –∞ —Ç–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑—ã–≤–∞—é –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é."""
    await message.answer_photo(photo='AgACAgIAAxkBAAIEC2jdZ6sAAfgCFZS2watT0AbLtGGTqAAC6P4xG5Dr6UoQSp_vf5o0mAEAAwIAA3kAAzYE', caption=reviews_group4)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–•–æ—á—É —Ç–∞–∫ –∂–µ", callback_data="make_order")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="support")],
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")],
    ])
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è:", reply_markup=keyboard)

# –û –Ω–∞—Å
async def handle_about_us(message: types.Message):
    text = """–ü–æ–≥–ª–∞–¥—å–ë–æ—Ç ‚Äî —Å–µ—Ä–≤–∏—Å —Å 2024 –≥–æ–¥–∞. –ü–æ –ß–µ–ª—è–±–∏–Ω—Å–∫—É —É–∂–µ —Å—ç–∫–æ–Ω–æ–º–∏–ª–∏ –≤—Ä–µ–º—è 900+ –∫–ª–∏–µ–Ω—Ç–∞–º. –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ ‚Äî 24 —á–∞—Å–∞. –ö–æ–º–∞–Ω–¥–∞: 10+ –∫—É—Ä—å–µ—Ä–æ–≤ –∏ 10+ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≥–ª–∞–∂–∫–µ.
–§–∞–∫—Ç—ã:
* –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤ 3 —ç—Ç–∞–ø–∞: –æ—Å–º–æ—Ç—Ä, –≥–ª–∞–∂–∫–∞, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
* –£–ø–∞–∫–æ–≤–∫–∞: –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è —É–∫–ª–∞–¥–∫–∞ —á—Ç–æ–±—ã –¥–æ–µ—Ö–∞–ª–æ –±–µ–∑ –∑–∞–ª–æ–º–æ–≤, –ø–∞–∫–µ—Ç –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –≤–ª–∞–≥–∏.
* –ß–µ—Å—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏: –æ–±—ã—á–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è ‚Äî –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é.
* –ì–∞—Ä–∞–Ω—Ç–∏—è: –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É—Å—Ç—Ä–æ–∏–ª ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤.
* –£–¥–æ–±—Å—Ç–≤–æ: –∫—É—Ä—å–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –º–æ–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å –≤–µ—â–∏ —Ö–æ—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
* –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –∂–∏–≤–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã, –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫."""
    await message.answer_photo(photo='AgACAgIAAxkBAAIED2jdZ-20723XKulmd-KCeY9ebsV3AALr_jEbkOvpSg1Zsk6-nJcNAQADAgADeQADNgQ', caption=text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="support")],
    ])
    
    await message.answer(text, reply_markup=keyboard)

# –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞
async def handle_support(message: types.Message):
    text = "–ù–∞–ø–∏—à–∏ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞–º, –º—ã –æ—Ç–≤–µ—Ç–∏–º (–ø–æ–∫–∞ –º–æ–∂–µ—à—å –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ª–∏—á–∫—É –û–ª–µ–≥—É)"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –û–ª–µ–≥—É", url="https://t.me/OlegMahalov")],
    ])
    await message.answer(text, reply_markup=keyboard)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@dp.message()
async def handle_photo(message: types.Message):
    if message.photo:
        photo = message.photo[-1]
        file_id = photo.file_id
        await message.answer(f"–ü–æ–ª—É—á–µ–Ω file_id: {file_id}")

# –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è
async def check_inactive_users():
    while True:
        now = datetime.now()
        for user_id, info in list(users.items()):
            delta = (now - info['last_activity']).total_seconds() / 60
            if delta > 3 and 'sent_3min' not in info:
                await bot.send_message(user_id, "–ù–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è ‚Äî –∫–∞–∂–¥–∞—è —Ç—Ä–µ—Ç—å—è –≤–µ—â—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ üòÑ\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –≤ –±–æ—Ç–µ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")]]))
                info['sent_3min'] = True
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫
async def main():
    try:
        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        inactive_task = asyncio.create_task(check_inactive_users())
        
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–ø—Ä–æ—Å–∞
        await dp.start_polling(bot)
    except (asyncio.CancelledError, KeyboardInterrupt):
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
        logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è graceful shutdown...")
        await asyncio.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è flood control
        await bot.close()
        if not inactive_task.done():
            inactive_task.cancel()
            try:
                await inactive_task
            except asyncio.CancelledError:
                logging.info("–§–æ–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ check_inactive_users —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
        raise SystemExit("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
    finally:
        await asyncio.sleep(5)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        await bot.close()
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    asyncio.run(main())
